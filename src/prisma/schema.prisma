// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum role {
    user
    admin
}

enum registerMethod {
    local
    google
}

model users {
    id        String                  @id @default(uuid())
    email     String                  @unique
    password  String
    method    registerMethod          @default(local)
    role      role                    @default(user)
    Profiles  Profiles?
    sessions  sessions[]
    alergens  ingredients[]
    bookmarks userFoodBookmarkAssoc[]
    createdAt DateTime                @default(now())
    updatedAt DateTime                @updatedAt
    deletedAt DateTime?
}

model Profiles {
    id        Int       @id @default(autoincrement())
    user      users     @relation(fields: [userId], references: [id])
    userId    String    @unique
    name      String?
    avatar    String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?

    @@map("userProfiles")
}

model sessions {
    id         Int      @id @default(autoincrement())
    user       users    @relation(fields: [userId], references: [id])
    userId     String
    key        String   @unique
    deviceId   String?
    deviceName String?
    ip         String
    isActive   Boolean  @default(true)
    createdAt  DateTime @default(now())
    lastUsed   DateTime @default(now())
    expiresAt  DateTime
}

model ingredients {
    id            Int       @id @default(autoincrement())
    name          String    @unique
    icon          String?
    isMainAlergen Boolean   @default(false)
    foods         foods[]
    allergicUsers users[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?
}

model foods {
    id                    Int                     @id @default(autoincrement())
    externalId            String?
    name                  String                  @unique
    picture               String
    description           String?
    ingredients           ingredients[]
    userFoodBookmarkAssoc userFoodBookmarkAssoc[]
    createdAt             DateTime                @default(now())
    updatedAt             DateTime                @updatedAt
    deletedAt             DateTime?
}

model userFoodBookmarkAssoc {
    user         users     @relation(fields: [userId], references: [id])
    userId       String
    food         foods     @relation(fields: [foodId], references: [id])
    foodId       Int
    bookmarkedAt DateTime  @default(now())
    deletedAt    DateTime?

    @@id([userId, foodId])
}
